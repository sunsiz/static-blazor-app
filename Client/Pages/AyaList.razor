@page "/AyaList"
@using BlazorApp.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime 

<div class="text-center vstack shadow-lg bg-warning bg-gradient rounded-3">
    <h3 class="pt-3 pb-0 text-success">@SuraId. @SuraName</h3>
    <span class="text-center arabic mx-auto fs-2 fw-bold pb-2 pt-0 header-gradient">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</span>
</div>
@foreach (Aya aya in ayaList)
{
    <div class="row my-3" id="@aya.AyaId">
        <div class="col">
            <div class="card bg-light bg-gradient">
                <div class="card-body">
                    <div class="vstack">
                        <h5 class="card-title bg-primary bg-gradient hstack rounded-3 gap-3 text-white">
                            <span class="bg-danger bg-gradient border-3 rounded-2 shadow-lg me-auto p-2 ms-1">@aya.AyaId</span>
                            @* <span class="oi oi-share ms-auto" title="Share" aria-hidden="true" @onclick="()=>ShareAya(aya)"></span>
                            <span class='oi oi-heart @(aya.IsFavorite?"text-warning":"text-white")' title="Favorite" aria-hidden="true" @onclick="()=>Favorite(aya)"></span> *@
                            @* <span class='oi oi-bookmark me-3 @(IsBookmark(aya)?"text-warning":"text-white")' title="Bookmark" aria-hidden="true" @onclick="()=>Bookmark(aya)"></span> *@
                        </h5>
                        <p class="arabic mb-0 me-2" style="font-size: @_arabicStyle px;">@aya.Arabic</p>
                        <p class="my-2" style=@($"font-szie: {_textStyle} px;")>@aya.Text</p>
                        @* @if (aya.Comment != null)
                        {
                            <hr />
                            <p style="font-size: @_commentStyle px;">
                                @((MarkupString)aya.Comment)
                            </p>
                        } *@
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int SuraId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string SuraName { get; set; }
    private Aya[] ayaList = new Aya[] { };
    string _arabicStyle = "16";
    string _textStyle = "14";
    string _commentStyle = "12";
    // string ArabicStyle
    // {
    //     get
    //     {
    //         var result = await LocalStoragrageHelper.GetValueAsync<string>("arabic");
    //         if (string.IsNullOrEmpty(result)) result = 16.ToString();
    //         return "font-size: " + result + "px;";
    //     }
    // }

    // string TextStyle
    // {
    //     get
    //     {
    //         var result = await LocalStoragrageHelper.GetValueAsync<string>("text");
    //         if (string.IsNullOrEmpty(result)) result = 14.ToString();
    //         return "font-size: " + result + "px;";
    //     }
    // }

    // string CommentStyle
    // {
    //     get
    //     {
    //         var result = await LocalStoragrageHelper.GetValueAsync<string>("arabic");
    //         if (string.IsNullOrEmpty(result)) result = 12.ToString();
    //         return "font-size: " + result + "px;";
    //     }
    // }
    // private string arabicStyle
    // {
    //     get
    //     {
    //         var result = JSRuntime.InvokeAsync<int>("localStorage.getItem", "ArabicFontSize").ConfigureAwait(false);
    //         // if (result == 0) result = 16;
    //         return "font-size:" + result + "px";
    //     }
    // }

    // private string textStyle
    // {
    //     get
    //     {
    //         var result = JSRuntime.InvokeAsync<int>("localStorage.getItem", "TranslateFontSize");
    //         // result = result == 0 ? 14 : result;
    //         return "font-size:" + result + "px";
    //     }
    // }

    // private string commentStyle
    // {
    //     get
    //     {
    //         var result = JSRuntime.InvokeAsync<int>("localStorage.getItem", "CommentFontSize");
    //         // if (result == 0) result = 12;
    //         return "font-size:" + result + "px";
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ayaList = await Http.GetFromJsonAsync<Aya[]>("/api/Aya/"+SuraId) ?? new Aya[] { };
            Console.WriteLine("Aya list is " + ayaList);
            var helper = new LocalStoragrageHelper(JSRuntime);
            _arabicStyle = await helper.GetValueAsync<string>("arabic");
            _textStyle = await helper.GetValueAsync<string>("text");
            _commentStyle = await helper.GetValueAsync<string>("arabic");
            Console.WriteLine("Arabic font size:"+_arabicStyle);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private bool IsBookmark(Aya aya)
    {
        var bookmark = JSRuntime.InvokeAsync<string>("localStorage.getItem", "bookmark").Result;
        return bookmark == aya.SuraId + ":" + aya.AyaId;
    }

    private void Bookmark(Aya aya)
    {
        JSRuntime.InvokeVoidAsync("localStorage.setItem", "bookmark", aya.SuraId + ":" + aya.AyaId);
    }

}